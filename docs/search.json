[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to my blog, a personal journey through the intricate and fascinating world of Machine Learning. My name is Ziming ‚ÄòJoanna‚Äô Fang, and I‚Äôm thrilled to have you join me in exploring various aspects of this dynamic field.\nCurrently pursuing my Master‚Äôs in Computer Science and Applications at Virginia Tech, I have a solid background in computer science and a keen interest in the practical applications of machine learning. This blog is not just a platform for sharing knowledge but also a reflection of my passion for understanding and leveraging the power of data and algorithms.\nHere‚Äôs what you can expect from my blog:\n\nProbability Theory and Random Variables: We‚Äôll start with the basics, exploring how probability theory and random variables form the foundation of machine learning. Expect deep dives into theory, practical examples, and intriguing problems.\nClustering: Clustering algorithms are pivotal in understanding data segmentation. I‚Äôll share insights on various clustering methods, their applications, and their role in data analysis.\nLinear and Nonlinear Regression: A journey through the realm of regression analysis, covering both linear and nonlinear approaches. I‚Äôll elucidate these concepts with real-world examples and hands-on coding.\nClassification: Delve into the world of classification algorithms. I‚Äôll break down complex concepts into digestible content, making it easier to understand how these algorithms categorize data.\nAnomaly/Outlier Detection: We‚Äôll explore the techniques used to identify anomalies in data sets, an important aspect of data analysis and security.\n\nEach post will be enriched with machine learning code snippets and at least one data visualization, ensuring a comprehensive and practical learning experience.\nI‚Äôm building this blog with Quarto and hosting it on GitHub Pages. This approach aligns with my belief in transparency, accessibility, and the power of open-source tools. You‚Äôll find my blog not just informative but also a testament to the power of programmatic website creation.\nOutside of academics, my experience as a Software Engineer at Avocado LLC and as a Research Assistant at the Mind Music Machine Lab has equipped me with a unique blend of skills. Whether it‚Äôs automating PDF news article processing with Python and ChatGPT, or applying sentiment extraction programs for emotional sonification in storytelling, I‚Äôve always been at the intersection of innovation and practicality.\nSo, whether you‚Äôre a fellow machine learning enthusiast, a curious learner, or someone interested in the intersection of data and technology, I invite you to join me on this enlightening journey. Let‚Äôs explore the world of machine learning together!\nHappy reading and learning! Ziming ‚ÄòJoanna‚Äô Fang üåüü§ñüìä\nOpenAI. (2023). ChatGPT [Large language model]. https://chat.openai.com"
  },
  {
    "objectID": "posts/probability/index.html",
    "href": "posts/probability/index.html",
    "title": "Probability Theory and Random Variables",
    "section": "",
    "text": "The Binomial distribution is a cornerstone of probability theory, serving as a foundation for more complex distributions, including the Poisson distribution. This section aims to clarify the basics of the Binomial distribution.\n\n\nThe Binomial distribution is a probability distribution that models the number of successes in a fixed number of independent trials, with each trial having the same probability of success. It is particularly useful in scenarios with two possible outcomes, often labeled as ‚Äúsuccess‚Äù and ‚Äúfailure.‚Äù\n\n\n\n\nNumber of Trials (\\(n\\)): This denotes the total number of independent trials or experiments.\nProbability of Success (\\(p\\)): The probability of achieving a successful outcome in an individual trial.\nNumber of Successes (\\(k\\)): The specific count of successful outcomes we are interested in.\n\n\n\n\nThe probability of observing exactly \\(k\\) successes in \\(n\\) trials is described by the Binomial formula: \\[ P(X = k) = \\binom{n}{k} p^k (1 - p)^{n - k} \\] Here, \\(\\binom{n}{k}\\) (pronounced ‚Äún choose k‚Äù) represents the number of ways to select \\(k\\) successes from \\(n\\) trials.\n\n\n\nConsider a scenario where you flip a coin 10 times. What is the probability of flipping exactly 4 heads? In this example: - \\(n = 10\\) (the total number of coin flips), - \\(p = 0.5\\) (the probability of flipping heads on any single coin flip), - \\(k = 4\\) (the number of heads we are trying to achieve).\nUsing the Binomial formula, the probability is: \\[ P(X = 4) = \\binom{10}{4} (0.5)^4 (1 - 0.5)^{10 - 4} \\]\n\n\n\nThe Binomial distribution is crucial in understanding binary outcomes across various fields such as psychology, medicine, and quality control. It provides a framework for scenarios with fixed trial numbers and clear success/failure outcomes. However, for large-scale or continuous-event contexts, the Poisson distribution becomes more relevant, as we will explore in subsequent sections.\n\n\n\n\nIn this section, we explore the intriguing relationship between the Binomial and Poisson distributions and how one transitions into the other under certain conditions. This transition is particularly important in scenarios involving a large number of trials and a small probability of success.\n\n\nThe Binomial distribution effectively models situations with a fixed number of independent trials and a constant probability of success in each trial. However, when we consider scenarios where the number of trials (\\(n\\)) is very large, and the probability of success in each trial (\\(p\\)) is very small, the Binomial distribution becomes less practical for calculations. This is where the Poisson distribution becomes relevant.\nThe key to this transition lies in the product of \\(n\\) and \\(p\\). As \\(n\\) becomes larger and \\(p\\) smaller, while their product \\(np\\) (representing the average number of successes) remains constant, the Binomial distribution approaches the Poisson distribution. This constant product, \\(np\\), is what we denote as \\(\\lambda\\) in the Poisson distribution.\n\n\n\nThe formula for the Poisson distribution is as follows: \\[ P(X = k) = \\frac{\\lambda^k e^{-\\lambda}}{k!} \\] In this equation, \\(X\\) is the random variable representing the number of successes, \\(k\\) is the specific number of successes we are interested in, \\(\\lambda\\) is the average rate of success, \\(e\\) is the base of the natural logarithm, and \\(k!\\) is the factorial of \\(k\\).\n\n\n\nTo further our understanding of the transition from the Binomial to the Poisson distribution, visual aids can be immensely helpful. In this section, we will use a series of graphs to illustrate how the Binomial distribution morphs into the Poisson distribution as the number of trials increases and the probability of success decreases.\n\nImporting Libraries First, we install and import the necessary Python libraries for our calculations and visualizations.\n\nimport sys\n!{sys.executable} -m pip install numpy\n!{sys.executable} -m pip install matplotlib\n!{sys.executable} -m pip install scipy\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import binom, poisson\n\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: numpy in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (1.26.2)\nWARNING: You are using pip version 21.2.4; however, version 23.3.1 is available.\nYou should consider upgrading via the '/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip' command.\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: matplotlib in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (3.8.2)\nRequirement already satisfied: numpy&lt;2,&gt;=1.21 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (1.26.2)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (1.2.0)\nRequirement already satisfied: importlib-resources&gt;=3.2.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (6.1.1)\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (1.4.5)\nRequirement already satisfied: cycler&gt;=0.10 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (0.12.1)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (4.45.1)\nRequirement already satisfied: packaging&gt;=20.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (23.2)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (3.1.1)\nRequirement already satisfied: pillow&gt;=8 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (10.1.0)\nRequirement already satisfied: python-dateutil&gt;=2.7 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (2.8.2)\nRequirement already satisfied: zipp&gt;=3.1.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from importlib-resources&gt;=3.2.0-&gt;matplotlib) (3.17.0)\nRequirement already satisfied: six&gt;=1.5 in /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib) (1.15.0)\nWARNING: You are using pip version 21.2.4; however, version 23.3.1 is available.\nYou should consider upgrading via the '/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip' command.\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: scipy in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (1.11.4)\nRequirement already satisfied: numpy&lt;1.28.0,&gt;=1.21.6 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from scipy) (1.26.2)\nWARNING: You are using pip version 21.2.4; however, version 23.3.1 is available.\nYou should consider upgrading via the '/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip' command.\n\n\nSetting Parameters for the Distributions We define a range of \\(n\\) values to show how increasing the number of trials and decreasing the probability of success in each trial impacts the distribution. We also set a constant value for \\(p\\), the probability of success, and choose a value for \\(k\\), the number of successes we‚Äôre interested in.\n\nn_values = [20, 50, 100, 500]  # Increasing number of trials\np_values = [0.9, 0.8, 0.3, 0.01]  # Decreasing number of trials\nk = 5                          # Number of successes\n\nCalculating and Plotting the Distributions For each value of \\(n\\), we calculate the probabilities using both the Binomial and Poisson distributions and plot them for comparison.\n\nplt.figure(figsize=(12, 8))\n\nfor i, n in enumerate(n_values):\n    lambda_ = n * p_values[i]\n    x = np.arange(0, 20)\n    binom_pmf = binom.pmf(x, n, p_values[i])\n    poisson_pmf = poisson.pmf(x, lambda_)\n\n    plt.subplot(2, 2, i+1)\n    plt.plot(x, binom_pmf, 'o-', label=\"Binomial\")\n    plt.plot(x, poisson_pmf, 'x-', label=\"Poisson\")\n    plt.title(f'n = {n}, p = {p_values[i]}, lambda = {lambda_}')\n    plt.xlabel('k (Number of successes)')\n    plt.ylabel('Probability')\n    plt.legend()\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nShifting Shapes: As \\(n\\) increases and \\(p\\) decreases, we observe that the shape of the Binomial distribution starts resembling that of the Poisson distribution. Initially, for smaller values of \\(n\\), the Binomial distribution might appear distinctly different. However, as \\(n\\) grows, the graphs showcase a closer alignment between the two distributions.\nConvergence to Poisson: The convergence of the Binomial distribution to the Poisson distribution is evident in these plots. The Poisson distribution begins to effectively approximate the Binomial distribution, especially as the product \\(np\\) (or \\(\\lambda\\)) remains constant.\nPractical Implications: This visual demonstration is crucial for understanding how the Poisson distribution can be used in real-life scenarios where the Binomial distribution is impractical due to a large number of trials. It highlights the flexibility and applicability of the Poisson distribution in various fields, from telecommunications to natural event modeling.\n\n\n\n\n\nNow that we have a foundational understanding of the Poisson distribution and its relationship with the Binomial distribution, let‚Äôs apply this knowledge to a practical scenario: the number of emails received per hour. This real-world example will illustrate how the Poisson distribution is used to model and understand everyday phenomena.\n\n\nConsider a situation where you‚Äôre monitoring the number of emails received in your office inbox. After some observation, you determine that, on average, you receive 5 emails per hour. In the context of the Poisson distribution, this average rate, 5 emails per hour, is our \\(\\lambda\\) (lambda).\n\n\n\nTo understand how the Poisson distribution works in this scenario, we will calculate the probabilities of receiving exactly 3, 5, or 10 emails in an hour. We‚Äôll use Python to perform these calculations.\n\nDefining the Average Rate (\\(\\lambda\\)) Our average rate \\(\\lambda\\) is 5 emails per hour.\n\nlambda_ = 5  # Average number of emails per hour\n\nCalculating Probabilities We calculate the probability for receiving 3, 5, and 10 emails respectively.\n\nprobs = {}\nfor k in [0, 3, 5, 10, 15]:\n    probs[k] = poisson.pmf(k, lambda_)\n\nInterpreting the Results Let‚Äôs print out the probabilities.\n\nfor k, prob in probs.items():\n    print(f\"Probability of receiving exactly {k} emails: {prob:.4f}\")\n\nProbability of receiving exactly 0 emails: 0.0067\nProbability of receiving exactly 3 emails: 0.1404\nProbability of receiving exactly 5 emails: 0.1755\nProbability of receiving exactly 10 emails: 0.0181\nProbability of receiving exactly 15 emails: 0.0002\n\n\n\n\n\n\nNow, we‚Äôll graph the Poisson distribution for our email scenario to visualize these probabilities.\n\nSetting Up the Plot We will create a plot that shows the probability of receiving a range of emails in an hour.\n\nx = np.arange(0, 15)  # Define the range of emails\ny = poisson.pmf(x, lambda_)\n\nplt.bar(x, y)\nplt.title(\"Poisson Distribution of Emails Received Per Hour\")\nplt.xlabel(\"Number of Emails\")\nplt.ylabel(\"Probability\")\nplt.xticks(x)\nplt.show()\n\n\n\n\n\n\n\n\n\nProbability Results: The calculated probabilities provide insights into the likelihood of different email counts. For instance, if the probability of receiving exactly 10 emails is low, it could indicate an unusually busy hour if it happens.\nGraphical Representation: The bar graph visually demonstrates the probabilities of different email counts per hour, emphasizing the most likely outcomes and showcasing the typical variance one might expect in their inbox.\n\n\n\n\nNext, just for fun, we will calculate and visualize the probability of receiving fewer than a certain number of emails per hour in case you want to know what‚Äôs the possibility of you need to handle less than 0, 3, 5, or 10 emails. For each threshold, we will calculate the cumulative probability of receiving less than that number of emails and visualize these probabilities using bar graphs with highlighted sections.\nThe cumulative probability for receiving fewer than a certain number of emails can be calculated using the cumulative distribution function (CDF) of the Poisson distribution.\n\nDefining the Average Rate (\\(\\lambda\\)) and Thresholds Our average rate, \\(\\lambda\\), is still 5 emails per hour. We also define our thresholds.\n\nlambda_ = 5  # Average number of emails per hour\nthresholds = [0, 3, 5, 10]\n\nCalculating Cumulative Probabilities We calculate the cumulative probability for each threshold.\n\ncdf_values = {}\nfor threshold in thresholds:\n    cdf_values[threshold] = poisson.cdf(threshold, lambda_)\n    print(f\"Probability of receiving less than {threshold} emails in an hour: {cdf_values[threshold]:.4f}\")\n\nProbability of receiving less than 0 emails in an hour: 0.0067\nProbability of receiving less than 3 emails in an hour: 0.2650\nProbability of receiving less than 5 emails in an hour: 0.6160\nProbability of receiving less than 10 emails in an hour: 0.9863\n\n\n\n\n\n\nWe will create a series of bar graphs to visually represent these probabilities. Each graph will highlight the bars representing the number of emails up to the threshold.\n\nSetting Up the Plot We define the range for the number of emails.\n\nx = np.arange(0, 15)  # Define the range of emails\ny = poisson.pmf(x, lambda_)\n\nCreating and Coloring the Graphs We create a separate graph for each threshold, coloring the bars up to that threshold differently.\n\nfor threshold in thresholds:\n    plt.figure(figsize=(6, 4))\n    plt.bar(x, y, color='grey')  # Default color\n    plt.bar(x[:threshold+1], y[:threshold+1], color='#E83283')  # Highlight up to the threshold\n    plt.title(f\"Probability of Receiving Fewer than {threshold} Emails\")\n    plt.xlabel(\"Number of Emails\")\n    plt.ylabel(\"Probability\")\n    plt.xticks(x)\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnderstanding Cumulative Probabilities: These graphs provide a visual representation of the cumulative probability of receiving fewer than a certain number of emails. A higher highlighted area indicates a greater likelihood of receiving fewer emails than the specified threshold.\nPractical Insights: Such visualizations can help individuals and businesses to anticipate and prepare for varying email volumes, thereby aiding in effective time management and resource allocation.\n\n\n\n\n\nHaving applied the Poisson distribution to the scenario of receiving emails per hour, let‚Äôs delve deeper into how this analysis can be beneficial for businesses or individuals and attempt to compare our theoretical findings with actual data.\n\n\nUnderstanding the pattern of email arrivals using the Poisson distribution can have significant practical applications, particularly in business settings.\n\nWorkload Management: For individuals or teams managing large volumes of emails, understanding the likelihood of receiving a certain number of emails can help in planning their workload. If the probability of receiving a high number of emails at certain hours is more, one can allocate more resources or time to manage this influx.\nStaffing in Customer Service: Customer service departments that rely heavily on email communication can use these predictions to staff their teams more efficiently. During hours predicted to have a higher volume of emails, more staff can be scheduled to ensure timely responses.\nPredictive Analysis for Planning: Businesses can use this data for predictive analysis. If certain days or times are consistently seeing a higher volume of emails, this information can be used for strategic planning, such as launching marketing emails or scheduling maintenance activities.\n\n\n\n\nTo demonstrate the practical application of our theoretical analysis, let‚Äôs compare the Poisson distribution with actual email data. For this example, we‚Äôll assume a sample data set representing the number of emails received per hour over a week.\n\nGenerating Sample Data Let‚Äôs simulate some sample email data for this comparison.\n\nnp.random.seed(0)  # For reproducibility\nsample_data = np.random.poisson(lambda_, size=168)  # Simulating for 7 days (24 hours each)\n\nComparison with Theoretical Distribution We will plot the actual data alongside our theoretical Poisson distribution.\n\nplt.figure(figsize=(10, 5))\nplt.hist(sample_data, bins=range(15), alpha=0.7, label=\"Actual Data\")\nplt.plot(x, y * 168, 'o-', label=\"Theoretical Poisson Distribution\")  # 168 hours in a week\nplt.title(\"Comparison of Actual Email Data with Poisson Distribution\")\nplt.xlabel(\"Number of Emails\")\nplt.ylabel(\"Frequency\")\nplt.xticks(range(15))\nplt.legend()\nplt.show()\n\n\n\n\nIn the histogram generated above, the y-axis, labeled ‚ÄúFrequency,‚Äù represents the number of hours during the week when a specific number of emails were received.\nEach bar in the histogram corresponds to a particular number of emails received per hour (shown on the x-axis). The height of each bar indicates how many hours in the simulated week had that exact count of emails.\nFor example, if one of the bars represents 4 emails and its height reaches up to 10 on the y-axis, this means that there were 10 hours in the simulated week during which exactly 4 emails were received. The y-axis in this context is a count of the number of occurrences of each email count per hour across the entire week.\nTo calculate and plot the theoretical poisson distribution, x is an array representing different possible email counts per hour. y is calculated using the Poisson probability mass function (pmf) for each count in x, given the average rate lambda_. This y represents the theoretical probability of each email count per hour according to the Poisson distribution. The values in y are then multiplied by 168 (the total number of hours in the week) to scale these probabilities to the same total time frame as the actual data. The result is plotted as a line plot with markers (‚Äòo-‚Äô) overlaid on the histogram. This line represents the expected frequency of each email count per hour over a week according to the Poisson distribution.\n\n\n\n\n\nAlignment with Theoretical Model: If the actual data closely aligns with the theoretical Poisson distribution, it validates the use of this model for predicting email patterns.\nIdentifying Anomalies: Any significant deviations from the theoretical distribution might indicate anomalies or special events, prompting further investigation.\nReal-World Relevance: This comparison underscores the relevance of the Poisson distribution in modeling real-world scenarios, providing a valuable tool for data-driven decision-making.\n\n\n\n\n\nThroughout this exploration, we‚Äôve seen how the Poisson distribution serves as a powerful statistical tool for understanding and predicting patterns in events that occur rarely but with regularity. Using the example of the number of emails received per hour, we‚Äôve illustrated not only the theoretical underpinnings of the Poisson distribution but also its practical applications in real-world scenarios.\nThe transition from the Binomial to the Poisson distribution, highlighted through graphical representations, demonstrates the versatility and efficiency of the Poisson distribution in situations involving large numbers of trials and low probabilities of success. The example of email patterns particularly resonates as it‚Äôs a common experience in both personal and professional settings. By applying the Poisson distribution to this scenario, we‚Äôve shown how it can be used to predict the frequency of events over a given time frame, providing valuable insights for planning and decision-making.\nIn professional contexts, especially in fields like customer service, IT, and communications, the Poisson distribution can be a vital tool for workload management and resource allocation. It allows businesses to predict and prepare for fluctuating demands, ensuring efficiency and responsiveness. Similarly, in personal contexts, understanding such patterns can help individuals manage their time and expectations more effectively.\nThis journey through the realms of probability and statistics underscores the importance of statistical tools like the Poisson distribution. They are not just abstract mathematical concepts but practical instruments that can be employed to make sense of the world around us, understand patterns, and make informed decisions. As we have seen, even something as commonplace as the flow of emails can be modeled and understood through the lens of statistics, revealing the hidden rhythms and patterns of our daily lives.\nIn conclusion, the Poisson distribution is more than just a statistical formula; it‚Äôs a lens through which we can view and interpret the regular yet random events of our world, making it an indispensable tool in both our personal and professional toolkits."
  },
  {
    "objectID": "posts/probability/index.html#understanding-the-binomial-distribution",
    "href": "posts/probability/index.html#understanding-the-binomial-distribution",
    "title": "Probability Theory and Random Variables",
    "section": "",
    "text": "The Binomial distribution is a cornerstone of probability theory, serving as a foundation for more complex distributions, including the Poisson distribution. This section aims to clarify the basics of the Binomial distribution.\n\n\nThe Binomial distribution is a probability distribution that models the number of successes in a fixed number of independent trials, with each trial having the same probability of success. It is particularly useful in scenarios with two possible outcomes, often labeled as ‚Äúsuccess‚Äù and ‚Äúfailure.‚Äù\n\n\n\n\nNumber of Trials (\\(n\\)): This denotes the total number of independent trials or experiments.\nProbability of Success (\\(p\\)): The probability of achieving a successful outcome in an individual trial.\nNumber of Successes (\\(k\\)): The specific count of successful outcomes we are interested in.\n\n\n\n\nThe probability of observing exactly \\(k\\) successes in \\(n\\) trials is described by the Binomial formula: \\[ P(X = k) = \\binom{n}{k} p^k (1 - p)^{n - k} \\] Here, \\(\\binom{n}{k}\\) (pronounced ‚Äún choose k‚Äù) represents the number of ways to select \\(k\\) successes from \\(n\\) trials.\n\n\n\nConsider a scenario where you flip a coin 10 times. What is the probability of flipping exactly 4 heads? In this example: - \\(n = 10\\) (the total number of coin flips), - \\(p = 0.5\\) (the probability of flipping heads on any single coin flip), - \\(k = 4\\) (the number of heads we are trying to achieve).\nUsing the Binomial formula, the probability is: \\[ P(X = 4) = \\binom{10}{4} (0.5)^4 (1 - 0.5)^{10 - 4} \\]\n\n\n\nThe Binomial distribution is crucial in understanding binary outcomes across various fields such as psychology, medicine, and quality control. It provides a framework for scenarios with fixed trial numbers and clear success/failure outcomes. However, for large-scale or continuous-event contexts, the Poisson distribution becomes more relevant, as we will explore in subsequent sections."
  },
  {
    "objectID": "posts/probability/index.html#transitioning-to-the-poisson-distribution",
    "href": "posts/probability/index.html#transitioning-to-the-poisson-distribution",
    "title": "Probability Theory and Random Variables",
    "section": "",
    "text": "In this section, we explore the intriguing relationship between the Binomial and Poisson distributions and how one transitions into the other under certain conditions. This transition is particularly important in scenarios involving a large number of trials and a small probability of success.\n\n\nThe Binomial distribution effectively models situations with a fixed number of independent trials and a constant probability of success in each trial. However, when we consider scenarios where the number of trials (\\(n\\)) is very large, and the probability of success in each trial (\\(p\\)) is very small, the Binomial distribution becomes less practical for calculations. This is where the Poisson distribution becomes relevant.\nThe key to this transition lies in the product of \\(n\\) and \\(p\\). As \\(n\\) becomes larger and \\(p\\) smaller, while their product \\(np\\) (representing the average number of successes) remains constant, the Binomial distribution approaches the Poisson distribution. This constant product, \\(np\\), is what we denote as \\(\\lambda\\) in the Poisson distribution.\n\n\n\nThe formula for the Poisson distribution is as follows: \\[ P(X = k) = \\frac{\\lambda^k e^{-\\lambda}}{k!} \\] In this equation, \\(X\\) is the random variable representing the number of successes, \\(k\\) is the specific number of successes we are interested in, \\(\\lambda\\) is the average rate of success, \\(e\\) is the base of the natural logarithm, and \\(k!\\) is the factorial of \\(k\\).\n\n\n\nTo further our understanding of the transition from the Binomial to the Poisson distribution, visual aids can be immensely helpful. In this section, we will use a series of graphs to illustrate how the Binomial distribution morphs into the Poisson distribution as the number of trials increases and the probability of success decreases.\n\nImporting Libraries First, we install and import the necessary Python libraries for our calculations and visualizations.\n\nimport sys\n!{sys.executable} -m pip install numpy\n!{sys.executable} -m pip install matplotlib\n!{sys.executable} -m pip install scipy\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import binom, poisson\n\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: numpy in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (1.26.2)\nWARNING: You are using pip version 21.2.4; however, version 23.3.1 is available.\nYou should consider upgrading via the '/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip' command.\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: matplotlib in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (3.8.2)\nRequirement already satisfied: numpy&lt;2,&gt;=1.21 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (1.26.2)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (1.2.0)\nRequirement already satisfied: importlib-resources&gt;=3.2.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (6.1.1)\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (1.4.5)\nRequirement already satisfied: cycler&gt;=0.10 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (0.12.1)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (4.45.1)\nRequirement already satisfied: packaging&gt;=20.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (23.2)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (3.1.1)\nRequirement already satisfied: pillow&gt;=8 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (10.1.0)\nRequirement already satisfied: python-dateutil&gt;=2.7 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (2.8.2)\nRequirement already satisfied: zipp&gt;=3.1.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from importlib-resources&gt;=3.2.0-&gt;matplotlib) (3.17.0)\nRequirement already satisfied: six&gt;=1.5 in /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib) (1.15.0)\nWARNING: You are using pip version 21.2.4; however, version 23.3.1 is available.\nYou should consider upgrading via the '/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip' command.\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: scipy in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (1.11.4)\nRequirement already satisfied: numpy&lt;1.28.0,&gt;=1.21.6 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from scipy) (1.26.2)\nWARNING: You are using pip version 21.2.4; however, version 23.3.1 is available.\nYou should consider upgrading via the '/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip' command.\n\n\nSetting Parameters for the Distributions We define a range of \\(n\\) values to show how increasing the number of trials and decreasing the probability of success in each trial impacts the distribution. We also set a constant value for \\(p\\), the probability of success, and choose a value for \\(k\\), the number of successes we‚Äôre interested in.\n\nn_values = [20, 50, 100, 500]  # Increasing number of trials\np_values = [0.9, 0.8, 0.3, 0.01]  # Decreasing number of trials\nk = 5                          # Number of successes\n\nCalculating and Plotting the Distributions For each value of \\(n\\), we calculate the probabilities using both the Binomial and Poisson distributions and plot them for comparison.\n\nplt.figure(figsize=(12, 8))\n\nfor i, n in enumerate(n_values):\n    lambda_ = n * p_values[i]\n    x = np.arange(0, 20)\n    binom_pmf = binom.pmf(x, n, p_values[i])\n    poisson_pmf = poisson.pmf(x, lambda_)\n\n    plt.subplot(2, 2, i+1)\n    plt.plot(x, binom_pmf, 'o-', label=\"Binomial\")\n    plt.plot(x, poisson_pmf, 'x-', label=\"Poisson\")\n    plt.title(f'n = {n}, p = {p_values[i]}, lambda = {lambda_}')\n    plt.xlabel('k (Number of successes)')\n    plt.ylabel('Probability')\n    plt.legend()\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nShifting Shapes: As \\(n\\) increases and \\(p\\) decreases, we observe that the shape of the Binomial distribution starts resembling that of the Poisson distribution. Initially, for smaller values of \\(n\\), the Binomial distribution might appear distinctly different. However, as \\(n\\) grows, the graphs showcase a closer alignment between the two distributions.\nConvergence to Poisson: The convergence of the Binomial distribution to the Poisson distribution is evident in these plots. The Poisson distribution begins to effectively approximate the Binomial distribution, especially as the product \\(np\\) (or \\(\\lambda\\)) remains constant.\nPractical Implications: This visual demonstration is crucial for understanding how the Poisson distribution can be used in real-life scenarios where the Binomial distribution is impractical due to a large number of trials. It highlights the flexibility and applicability of the Poisson distribution in various fields, from telecommunications to natural event modeling."
  },
  {
    "objectID": "posts/probability/index.html#real-world-application---emails-per-hour",
    "href": "posts/probability/index.html#real-world-application---emails-per-hour",
    "title": "Probability Theory and Random Variables",
    "section": "",
    "text": "Now that we have a foundational understanding of the Poisson distribution and its relationship with the Binomial distribution, let‚Äôs apply this knowledge to a practical scenario: the number of emails received per hour. This real-world example will illustrate how the Poisson distribution is used to model and understand everyday phenomena.\n\n\nConsider a situation where you‚Äôre monitoring the number of emails received in your office inbox. After some observation, you determine that, on average, you receive 5 emails per hour. In the context of the Poisson distribution, this average rate, 5 emails per hour, is our \\(\\lambda\\) (lambda).\n\n\n\nTo understand how the Poisson distribution works in this scenario, we will calculate the probabilities of receiving exactly 3, 5, or 10 emails in an hour. We‚Äôll use Python to perform these calculations.\n\nDefining the Average Rate (\\(\\lambda\\)) Our average rate \\(\\lambda\\) is 5 emails per hour.\n\nlambda_ = 5  # Average number of emails per hour\n\nCalculating Probabilities We calculate the probability for receiving 3, 5, and 10 emails respectively.\n\nprobs = {}\nfor k in [0, 3, 5, 10, 15]:\n    probs[k] = poisson.pmf(k, lambda_)\n\nInterpreting the Results Let‚Äôs print out the probabilities.\n\nfor k, prob in probs.items():\n    print(f\"Probability of receiving exactly {k} emails: {prob:.4f}\")\n\nProbability of receiving exactly 0 emails: 0.0067\nProbability of receiving exactly 3 emails: 0.1404\nProbability of receiving exactly 5 emails: 0.1755\nProbability of receiving exactly 10 emails: 0.0181\nProbability of receiving exactly 15 emails: 0.0002\n\n\n\n\n\n\nNow, we‚Äôll graph the Poisson distribution for our email scenario to visualize these probabilities.\n\nSetting Up the Plot We will create a plot that shows the probability of receiving a range of emails in an hour.\n\nx = np.arange(0, 15)  # Define the range of emails\ny = poisson.pmf(x, lambda_)\n\nplt.bar(x, y)\nplt.title(\"Poisson Distribution of Emails Received Per Hour\")\nplt.xlabel(\"Number of Emails\")\nplt.ylabel(\"Probability\")\nplt.xticks(x)\nplt.show()\n\n\n\n\n\n\n\n\n\nProbability Results: The calculated probabilities provide insights into the likelihood of different email counts. For instance, if the probability of receiving exactly 10 emails is low, it could indicate an unusually busy hour if it happens.\nGraphical Representation: The bar graph visually demonstrates the probabilities of different email counts per hour, emphasizing the most likely outcomes and showcasing the typical variance one might expect in their inbox.\n\n\n\n\nNext, just for fun, we will calculate and visualize the probability of receiving fewer than a certain number of emails per hour in case you want to know what‚Äôs the possibility of you need to handle less than 0, 3, 5, or 10 emails. For each threshold, we will calculate the cumulative probability of receiving less than that number of emails and visualize these probabilities using bar graphs with highlighted sections.\nThe cumulative probability for receiving fewer than a certain number of emails can be calculated using the cumulative distribution function (CDF) of the Poisson distribution.\n\nDefining the Average Rate (\\(\\lambda\\)) and Thresholds Our average rate, \\(\\lambda\\), is still 5 emails per hour. We also define our thresholds.\n\nlambda_ = 5  # Average number of emails per hour\nthresholds = [0, 3, 5, 10]\n\nCalculating Cumulative Probabilities We calculate the cumulative probability for each threshold.\n\ncdf_values = {}\nfor threshold in thresholds:\n    cdf_values[threshold] = poisson.cdf(threshold, lambda_)\n    print(f\"Probability of receiving less than {threshold} emails in an hour: {cdf_values[threshold]:.4f}\")\n\nProbability of receiving less than 0 emails in an hour: 0.0067\nProbability of receiving less than 3 emails in an hour: 0.2650\nProbability of receiving less than 5 emails in an hour: 0.6160\nProbability of receiving less than 10 emails in an hour: 0.9863\n\n\n\n\n\n\nWe will create a series of bar graphs to visually represent these probabilities. Each graph will highlight the bars representing the number of emails up to the threshold.\n\nSetting Up the Plot We define the range for the number of emails.\n\nx = np.arange(0, 15)  # Define the range of emails\ny = poisson.pmf(x, lambda_)\n\nCreating and Coloring the Graphs We create a separate graph for each threshold, coloring the bars up to that threshold differently.\n\nfor threshold in thresholds:\n    plt.figure(figsize=(6, 4))\n    plt.bar(x, y, color='grey')  # Default color\n    plt.bar(x[:threshold+1], y[:threshold+1], color='#E83283')  # Highlight up to the threshold\n    plt.title(f\"Probability of Receiving Fewer than {threshold} Emails\")\n    plt.xlabel(\"Number of Emails\")\n    plt.ylabel(\"Probability\")\n    plt.xticks(x)\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnderstanding Cumulative Probabilities: These graphs provide a visual representation of the cumulative probability of receiving fewer than a certain number of emails. A higher highlighted area indicates a greater likelihood of receiving fewer emails than the specified threshold.\nPractical Insights: Such visualizations can help individuals and businesses to anticipate and prepare for varying email volumes, thereby aiding in effective time management and resource allocation."
  },
  {
    "objectID": "posts/probability/index.html#deep-dive-into-the-email-example",
    "href": "posts/probability/index.html#deep-dive-into-the-email-example",
    "title": "Probability Theory and Random Variables",
    "section": "",
    "text": "Having applied the Poisson distribution to the scenario of receiving emails per hour, let‚Äôs delve deeper into how this analysis can be beneficial for businesses or individuals and attempt to compare our theoretical findings with actual data.\n\n\nUnderstanding the pattern of email arrivals using the Poisson distribution can have significant practical applications, particularly in business settings.\n\nWorkload Management: For individuals or teams managing large volumes of emails, understanding the likelihood of receiving a certain number of emails can help in planning their workload. If the probability of receiving a high number of emails at certain hours is more, one can allocate more resources or time to manage this influx.\nStaffing in Customer Service: Customer service departments that rely heavily on email communication can use these predictions to staff their teams more efficiently. During hours predicted to have a higher volume of emails, more staff can be scheduled to ensure timely responses.\nPredictive Analysis for Planning: Businesses can use this data for predictive analysis. If certain days or times are consistently seeing a higher volume of emails, this information can be used for strategic planning, such as launching marketing emails or scheduling maintenance activities.\n\n\n\n\nTo demonstrate the practical application of our theoretical analysis, let‚Äôs compare the Poisson distribution with actual email data. For this example, we‚Äôll assume a sample data set representing the number of emails received per hour over a week.\n\nGenerating Sample Data Let‚Äôs simulate some sample email data for this comparison.\n\nnp.random.seed(0)  # For reproducibility\nsample_data = np.random.poisson(lambda_, size=168)  # Simulating for 7 days (24 hours each)\n\nComparison with Theoretical Distribution We will plot the actual data alongside our theoretical Poisson distribution.\n\nplt.figure(figsize=(10, 5))\nplt.hist(sample_data, bins=range(15), alpha=0.7, label=\"Actual Data\")\nplt.plot(x, y * 168, 'o-', label=\"Theoretical Poisson Distribution\")  # 168 hours in a week\nplt.title(\"Comparison of Actual Email Data with Poisson Distribution\")\nplt.xlabel(\"Number of Emails\")\nplt.ylabel(\"Frequency\")\nplt.xticks(range(15))\nplt.legend()\nplt.show()\n\n\n\n\nIn the histogram generated above, the y-axis, labeled ‚ÄúFrequency,‚Äù represents the number of hours during the week when a specific number of emails were received.\nEach bar in the histogram corresponds to a particular number of emails received per hour (shown on the x-axis). The height of each bar indicates how many hours in the simulated week had that exact count of emails.\nFor example, if one of the bars represents 4 emails and its height reaches up to 10 on the y-axis, this means that there were 10 hours in the simulated week during which exactly 4 emails were received. The y-axis in this context is a count of the number of occurrences of each email count per hour across the entire week.\nTo calculate and plot the theoretical poisson distribution, x is an array representing different possible email counts per hour. y is calculated using the Poisson probability mass function (pmf) for each count in x, given the average rate lambda_. This y represents the theoretical probability of each email count per hour according to the Poisson distribution. The values in y are then multiplied by 168 (the total number of hours in the week) to scale these probabilities to the same total time frame as the actual data. The result is plotted as a line plot with markers (‚Äòo-‚Äô) overlaid on the histogram. This line represents the expected frequency of each email count per hour over a week according to the Poisson distribution.\n\n\n\n\n\nAlignment with Theoretical Model: If the actual data closely aligns with the theoretical Poisson distribution, it validates the use of this model for predicting email patterns.\nIdentifying Anomalies: Any significant deviations from the theoretical distribution might indicate anomalies or special events, prompting further investigation.\nReal-World Relevance: This comparison underscores the relevance of the Poisson distribution in modeling real-world scenarios, providing a valuable tool for data-driven decision-making."
  },
  {
    "objectID": "posts/probability/index.html#conclusion",
    "href": "posts/probability/index.html#conclusion",
    "title": "Probability Theory and Random Variables",
    "section": "",
    "text": "Throughout this exploration, we‚Äôve seen how the Poisson distribution serves as a powerful statistical tool for understanding and predicting patterns in events that occur rarely but with regularity. Using the example of the number of emails received per hour, we‚Äôve illustrated not only the theoretical underpinnings of the Poisson distribution but also its practical applications in real-world scenarios.\nThe transition from the Binomial to the Poisson distribution, highlighted through graphical representations, demonstrates the versatility and efficiency of the Poisson distribution in situations involving large numbers of trials and low probabilities of success. The example of email patterns particularly resonates as it‚Äôs a common experience in both personal and professional settings. By applying the Poisson distribution to this scenario, we‚Äôve shown how it can be used to predict the frequency of events over a given time frame, providing valuable insights for planning and decision-making.\nIn professional contexts, especially in fields like customer service, IT, and communications, the Poisson distribution can be a vital tool for workload management and resource allocation. It allows businesses to predict and prepare for fluctuating demands, ensuring efficiency and responsiveness. Similarly, in personal contexts, understanding such patterns can help individuals manage their time and expectations more effectively.\nThis journey through the realms of probability and statistics underscores the importance of statistical tools like the Poisson distribution. They are not just abstract mathematical concepts but practical instruments that can be employed to make sense of the world around us, understand patterns, and make informed decisions. As we have seen, even something as commonplace as the flow of emails can be modeled and understood through the lens of statistics, revealing the hidden rhythms and patterns of our daily lives.\nIn conclusion, the Poisson distribution is more than just a statistical formula; it‚Äôs a lens through which we can view and interpret the regular yet random events of our world, making it an indispensable tool in both our personal and professional toolkits."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Probability Theory and Random Variables\n\n\n\n\n\n\n\ncode\n\n\nprobability\n\n\nemail traffic\n\n\n\n\n\n\n\n\n\n\n\nNov 28, 2023\n\n\nJoanna Fang\n\n\n\n\n\n\n  \n\n\n\n\nClustering\n\n\n\n\n\n\n\nml\n\n\ncode\n\n\nclustering\n\n\ndriving\n\n\nkaggle\n\n\n\n\n\n\n\n\n\n\n\nMay 8, 2024\n\n\nJoanna Fang\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/clustering/index.html",
    "href": "posts/clustering/index.html",
    "title": "Clustering",
    "section": "",
    "text": "The analysis of driving behaviors, a task of both complexity and nuance, is increasingly significant in the realms of traffic safety and autonomous vehicle development. Machine learning, particularly clustering algorithms, stands at the forefront of this analysis, offering the ability to dissect and understand the myriad patterns hidden within driving data. Clustering, a form of unsupervised learning, excels in finding structure within unlabeled data, grouping similar data points together based on shared characteristics.\nIn this blog, we dive into a practical application of clustering using a dataset from Kaggle titled ‚ÄòDriving Behavior‚Äô. This dataset is intriguing because it comes with labeled data, categorizing driving behaviors into three types: SLOW, NORMAL, and AGGRESSIVE. While clustering typically operates on unlabeled data, we use this labeled dataset to our advantage. It will allow us to compare the clusters formed by our machine learning algorithm against the pre-labeled categories, providing an insightful backdrop to understand and validate our clustering results.\nOur aim is to illustrate the entire process of applying clustering to analyze driving behavior. We start with a predefined notion of having three clusters based on the labels present in the dataset. However, as we delve deeper into the analysis, we realize the necessity to step back and question our initial assumptions. We employ the Elbow Method, supplemented by the kneed Python package, to determine the optimal number of clusters in a more data-driven manner. This journey from assumption to optimization is not just about applying a machine learning technique but also about understanding the nuances and intricacies that come with real-world data analysis.\nJoin us as we unravel the complexities of driving behaviors through clustering, starting with predefined labels and moving towards an optimized, data-driven approach.\n\n\n\nIn the world of machine learning, the choice of dataset is as crucial as the algorithm itself. For our endeavor into clustering driving behaviors, we‚Äôve chosen a dataset from Kaggle named ‚ÄòDriving Behavior‚Äô. This dataset is particularly interesting for a few reasons. Firstly, it‚Äôs labeled with specific driving behaviors, which, while not necessary for clustering, provides us with a unique opportunity to validate and understand our clustering results in a more tangible way.\n\n\nThis dataset offers a detailed glimpse into various aspects of driving, captured through different features:\n\nAcceleration (AccX, AccY, AccZ): These features measure the vehicle‚Äôs acceleration in meters per second squared (\\[m/s^2\\]) along the X, Y, and Z axes. Acceleration data is crucial for understanding sudden movements and changes in driving speed.\nRotation (GyroX, GyroY, GyroZ): Here, we have the vehicle‚Äôs angular velocity around the X, Y, and Z axes, measured in degrees per second (\\[¬∞/s\\]). This data helps in identifying steering patterns and gauging the stability of the vehicle during various maneuvers.\nClassification Labels (SLOW, NORMAL, AGGRESSIVE): Each data point is tagged with one of these labels. It‚Äôs important to note that in clustering, such labels are not typically required. However, in our case, these labels will serve as a benchmark, enabling us to compare our unsupervised learning results with pre-defined categories.\n\nThis dataset not only provides a foundation for applying clustering techniques but also allows us to explore how well unsupervised learning can mirror human-labeled classifications.\n\n\n\nOur analysis will be powered by several key tools and libraries, each bringing its own strengths to the table:\n\nPython: Our language of choice, renowned for its ease of use and strong community support, especially in data science.\nScikit-learn: A powerful Python library for machine learning. We will use its clustering algorithms, specifically KMeans, to group our data.\nMatplotlib: This library will help us in visualizing our data and the results of our clustering, making the insights more accessible.\nkneed: An invaluable tool when it comes to determining the optimal number of clusters. It programmatically identifies the ‚Äòelbow point‚Äô in our dataset, a crucial step in ensuring our clustering approach is as effective as possible.\n\nIn the next sections, we‚Äôll dive into the process of applying these tools to our dataset, starting with our initial approach and gradually moving towards a more refined, data-driven methodology.\n\n\n\n\n\nEmbarking on our journey to unravel the driving patterns hidden in the dataset, we initially gravitated towards a straightforward approach: clustering the data into three groups. This decision was influenced by the dataset‚Äôs labels - SLOW, NORMAL, and AGGRESSIVE. It seemed logical to align our clusters with these pre-defined categories, under the assumption that they would naturally encapsulate the essence of the driving behaviors.\n\n\nThe rationale was straightforward: the dataset labels suggested three distinct types of driving behaviors. Clustering aims to group similar data points, and with these labels as a guide, it seemed reasonable to start our analysis by segmenting the data into three clusters, hoping they would align with the labeled behaviors.\n\n\n\nThe KMeans algorithm was chosen for its simplicity and effectiveness in many clustering scenarios. Here‚Äôs a breakdown of how we applied it:\n\nimport sys\n!{sys.executable} -m pip install numpy\n!{sys.executable} -m pip install matplotlib\n!{sys.executable} -m pip install scipy\n!{sys.executable} -m pip install scikit-learn\n!{sys.executable} -m pip install pandas\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport pandas as pd\n\n# Load the dataset\n# Load the datasets\ndata_1 = pd.read_csv('motion_data_1.csv')\ndata_2 = pd.read_csv('motion_data_2.csv')\n\n# Combine datasets\ndata = pd.concat([data_1, data_2])\n\n# Data preprocessing\nscaler = StandardScaler()\nfeatures = data[['AccX', 'AccY', 'AccZ', 'GyroX', 'GyroY', 'GyroZ']]\nscaled_features = scaler.fit_transform(features)\n\n# Applying KMeans with 3 clusters\nkmeans = KMeans(n_clusters=3, random_state=42)\nclusters = kmeans.fit_predict(scaled_features)\n\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: numpy in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (1.26.2)\nWARNING: You are using pip version 21.2.4; however, version 23.3.1 is available.\nYou should consider upgrading via the '/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip' command.\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: matplotlib in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (3.8.2)\nRequirement already satisfied: cycler&gt;=0.10 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (0.12.1)\nRequirement already satisfied: importlib-resources&gt;=3.2.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (6.1.1)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (3.1.1)\nRequirement already satisfied: numpy&lt;2,&gt;=1.21 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (1.26.2)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (1.2.0)\nRequirement already satisfied: pillow&gt;=8 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (10.1.0)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (4.45.1)\nRequirement already satisfied: packaging&gt;=20.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (23.2)\nRequirement already satisfied: python-dateutil&gt;=2.7 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (2.8.2)\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (1.4.5)\nRequirement already satisfied: zipp&gt;=3.1.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from importlib-resources&gt;=3.2.0-&gt;matplotlib) (3.17.0)\nRequirement already satisfied: six&gt;=1.5 in /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib) (1.15.0)\nWARNING: You are using pip version 21.2.4; however, version 23.3.1 is available.\nYou should consider upgrading via the '/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip' command.\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: scipy in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (1.11.4)\nRequirement already satisfied: numpy&lt;1.28.0,&gt;=1.21.6 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from scipy) (1.26.2)\nWARNING: You are using pip version 21.2.4; however, version 23.3.1 is available.\nYou should consider upgrading via the '/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip' command.\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: scikit-learn in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (1.3.2)\nRequirement already satisfied: numpy&lt;2.0,&gt;=1.17.3 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from scikit-learn) (1.26.2)\nRequirement already satisfied: joblib&gt;=1.1.1 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from scikit-learn) (1.3.2)\nRequirement already satisfied: threadpoolctl&gt;=2.0.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from scikit-learn) (3.2.0)\nRequirement already satisfied: scipy&gt;=1.5.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from scikit-learn) (1.11.4)\nWARNING: You are using pip version 21.2.4; however, version 23.3.1 is available.\nYou should consider upgrading via the '/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip' command.\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: pandas in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (2.1.3)\nRequirement already satisfied: pytz&gt;=2020.1 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from pandas) (2023.3.post1)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from pandas) (2.8.2)\nRequirement already satisfied: tzdata&gt;=2022.1 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from pandas) (2023.3)\nRequirement already satisfied: numpy&lt;2,&gt;=1.22.4 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from pandas) (1.26.2)\nRequirement already satisfied: six&gt;=1.5 in /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas) (1.15.0)\nWARNING: You are using pip version 21.2.4; however, version 23.3.1 is available.\nYou should consider upgrading via the '/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip' command.\n\n\n/Users/zimingfang/Library/Python/3.9/lib/python/site-packages/sklearn/cluster/_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\n\n\nIn this code snippet, we begin by loading the dataset and selecting our features of interest, namely the acceleration and rotation measurements. These features are then scaled using StandardScaler, a crucial step to ensure that all features contribute equally to the clustering process. The KMeans algorithm is then applied to the scaled data, specifying three clusters.\n\n\n\nTo understand our initial clustering, we visualized the results:\n\nimport matplotlib.pyplot as plt\n\nplt.scatter(scaled_features[:,0], scaled_features[:,1], c=clusters, cmap='viridis')\nplt.xlabel('Scaled AccX')\nplt.ylabel('Scaled AccY')\nplt.title('Initial Clustering with 3 Clusters')\nplt.show()\n\n\n\n\nThis visualization plots the scaled acceleration data on the X and Y axes, colored by the assigned cluster. It provides a first glimpse into how the data points are grouped by the algorithm.\n\n\n\nWhile starting with three clusters seemed logical, this approach had its limitations. Clustering, especially KMeans, doesn‚Äôt inherently consider pre-existing labels. It simply groups data based on feature similarity. Moreover, the true complexity of driving behavior might not be accurately captured in just three categories. This realization led us to question our initial assumption: Were three clusters really sufficient to capture the diverse nuances of driving behavior?\nIn the following section, we explore how we addressed these limitations by seeking an optimal number of clusters beyond the confines of the initial labeled categories."
  },
  {
    "objectID": "posts/clustering/index.html#introduction",
    "href": "posts/clustering/index.html#introduction",
    "title": "Clustering",
    "section": "",
    "text": "The analysis of driving behaviors, a task of both complexity and nuance, is increasingly significant in the realms of traffic safety and autonomous vehicle development. Machine learning, particularly clustering algorithms, stands at the forefront of this analysis, offering the ability to dissect and understand the myriad patterns hidden within driving data. Clustering, a form of unsupervised learning, excels in finding structure within unlabeled data, grouping similar data points together based on shared characteristics.\nIn this blog, we dive into a practical application of clustering using a dataset from Kaggle titled ‚ÄòDriving Behavior‚Äô. This dataset is intriguing because it comes with labeled data, categorizing driving behaviors into three types: SLOW, NORMAL, and AGGRESSIVE. While clustering typically operates on unlabeled data, we use this labeled dataset to our advantage. It will allow us to compare the clusters formed by our machine learning algorithm against the pre-labeled categories, providing an insightful backdrop to understand and validate our clustering results.\nOur aim is to illustrate the entire process of applying clustering to analyze driving behavior. We start with a predefined notion of having three clusters based on the labels present in the dataset. However, as we delve deeper into the analysis, we realize the necessity to step back and question our initial assumptions. We employ the Elbow Method, supplemented by the kneed Python package, to determine the optimal number of clusters in a more data-driven manner. This journey from assumption to optimization is not just about applying a machine learning technique but also about understanding the nuances and intricacies that come with real-world data analysis.\nJoin us as we unravel the complexities of driving behaviors through clustering, starting with predefined labels and moving towards an optimized, data-driven approach."
  },
  {
    "objectID": "posts/clustering/index.html#setting-the-stage-with-data-and-tools",
    "href": "posts/clustering/index.html#setting-the-stage-with-data-and-tools",
    "title": "Clustering",
    "section": "",
    "text": "In the world of machine learning, the choice of dataset is as crucial as the algorithm itself. For our endeavor into clustering driving behaviors, we‚Äôve chosen a dataset from Kaggle named ‚ÄòDriving Behavior‚Äô. This dataset is particularly interesting for a few reasons. Firstly, it‚Äôs labeled with specific driving behaviors, which, while not necessary for clustering, provides us with a unique opportunity to validate and understand our clustering results in a more tangible way.\n\n\nThis dataset offers a detailed glimpse into various aspects of driving, captured through different features:\n\nAcceleration (AccX, AccY, AccZ): These features measure the vehicle‚Äôs acceleration in meters per second squared (\\[m/s^2\\]) along the X, Y, and Z axes. Acceleration data is crucial for understanding sudden movements and changes in driving speed.\nRotation (GyroX, GyroY, GyroZ): Here, we have the vehicle‚Äôs angular velocity around the X, Y, and Z axes, measured in degrees per second (\\[¬∞/s\\]). This data helps in identifying steering patterns and gauging the stability of the vehicle during various maneuvers.\nClassification Labels (SLOW, NORMAL, AGGRESSIVE): Each data point is tagged with one of these labels. It‚Äôs important to note that in clustering, such labels are not typically required. However, in our case, these labels will serve as a benchmark, enabling us to compare our unsupervised learning results with pre-defined categories.\n\nThis dataset not only provides a foundation for applying clustering techniques but also allows us to explore how well unsupervised learning can mirror human-labeled classifications.\n\n\n\nOur analysis will be powered by several key tools and libraries, each bringing its own strengths to the table:\n\nPython: Our language of choice, renowned for its ease of use and strong community support, especially in data science.\nScikit-learn: A powerful Python library for machine learning. We will use its clustering algorithms, specifically KMeans, to group our data.\nMatplotlib: This library will help us in visualizing our data and the results of our clustering, making the insights more accessible.\nkneed: An invaluable tool when it comes to determining the optimal number of clusters. It programmatically identifies the ‚Äòelbow point‚Äô in our dataset, a crucial step in ensuring our clustering approach is as effective as possible.\n\nIn the next sections, we‚Äôll dive into the process of applying these tools to our dataset, starting with our initial approach and gradually moving towards a more refined, data-driven methodology."
  },
  {
    "objectID": "posts/clustering/index.html#section-2-initial-clustering-approach",
    "href": "posts/clustering/index.html#section-2-initial-clustering-approach",
    "title": "Clustering",
    "section": "",
    "text": "Embarking on our journey to unravel the driving patterns hidden in the dataset, we initially gravitated towards a straightforward approach: clustering the data into three groups. This decision was influenced by the dataset‚Äôs labels - SLOW, NORMAL, and AGGRESSIVE. It seemed logical to align our clusters with these pre-defined categories, under the assumption that they would naturally encapsulate the essence of the driving behaviors.\n\n\nThe rationale was straightforward: the dataset labels suggested three distinct types of driving behaviors. Clustering aims to group similar data points, and with these labels as a guide, it seemed reasonable to start our analysis by segmenting the data into three clusters, hoping they would align with the labeled behaviors.\n\n\n\nThe KMeans algorithm was chosen for its simplicity and effectiveness in many clustering scenarios. Here‚Äôs a breakdown of how we applied it:\n\nimport sys\n!{sys.executable} -m pip install numpy\n!{sys.executable} -m pip install matplotlib\n!{sys.executable} -m pip install scipy\n!{sys.executable} -m pip install scikit-learn\n!{sys.executable} -m pip install pandas\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport pandas as pd\n\n# Load the dataset\n# Load the datasets\ndata_1 = pd.read_csv('motion_data_1.csv')\ndata_2 = pd.read_csv('motion_data_2.csv')\n\n# Combine datasets\ndata = pd.concat([data_1, data_2])\n\n# Data preprocessing\nscaler = StandardScaler()\nfeatures = data[['AccX', 'AccY', 'AccZ', 'GyroX', 'GyroY', 'GyroZ']]\nscaled_features = scaler.fit_transform(features)\n\n# Applying KMeans with 3 clusters\nkmeans = KMeans(n_clusters=3, random_state=42)\nclusters = kmeans.fit_predict(scaled_features)\n\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: numpy in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (1.26.2)\nWARNING: You are using pip version 21.2.4; however, version 23.3.1 is available.\nYou should consider upgrading via the '/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip' command.\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: matplotlib in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (3.8.2)\nRequirement already satisfied: cycler&gt;=0.10 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (0.12.1)\nRequirement already satisfied: importlib-resources&gt;=3.2.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (6.1.1)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (3.1.1)\nRequirement already satisfied: numpy&lt;2,&gt;=1.21 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (1.26.2)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (1.2.0)\nRequirement already satisfied: pillow&gt;=8 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (10.1.0)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (4.45.1)\nRequirement already satisfied: packaging&gt;=20.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (23.2)\nRequirement already satisfied: python-dateutil&gt;=2.7 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (2.8.2)\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from matplotlib) (1.4.5)\nRequirement already satisfied: zipp&gt;=3.1.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from importlib-resources&gt;=3.2.0-&gt;matplotlib) (3.17.0)\nRequirement already satisfied: six&gt;=1.5 in /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib) (1.15.0)\nWARNING: You are using pip version 21.2.4; however, version 23.3.1 is available.\nYou should consider upgrading via the '/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip' command.\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: scipy in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (1.11.4)\nRequirement already satisfied: numpy&lt;1.28.0,&gt;=1.21.6 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from scipy) (1.26.2)\nWARNING: You are using pip version 21.2.4; however, version 23.3.1 is available.\nYou should consider upgrading via the '/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip' command.\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: scikit-learn in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (1.3.2)\nRequirement already satisfied: numpy&lt;2.0,&gt;=1.17.3 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from scikit-learn) (1.26.2)\nRequirement already satisfied: joblib&gt;=1.1.1 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from scikit-learn) (1.3.2)\nRequirement already satisfied: threadpoolctl&gt;=2.0.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from scikit-learn) (3.2.0)\nRequirement already satisfied: scipy&gt;=1.5.0 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from scikit-learn) (1.11.4)\nWARNING: You are using pip version 21.2.4; however, version 23.3.1 is available.\nYou should consider upgrading via the '/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip' command.\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: pandas in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (2.1.3)\nRequirement already satisfied: pytz&gt;=2020.1 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from pandas) (2023.3.post1)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from pandas) (2.8.2)\nRequirement already satisfied: tzdata&gt;=2022.1 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from pandas) (2023.3)\nRequirement already satisfied: numpy&lt;2,&gt;=1.22.4 in /Users/zimingfang/Library/Python/3.9/lib/python/site-packages (from pandas) (1.26.2)\nRequirement already satisfied: six&gt;=1.5 in /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas) (1.15.0)\nWARNING: You are using pip version 21.2.4; however, version 23.3.1 is available.\nYou should consider upgrading via the '/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip' command.\n\n\n/Users/zimingfang/Library/Python/3.9/lib/python/site-packages/sklearn/cluster/_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\n\n\nIn this code snippet, we begin by loading the dataset and selecting our features of interest, namely the acceleration and rotation measurements. These features are then scaled using StandardScaler, a crucial step to ensure that all features contribute equally to the clustering process. The KMeans algorithm is then applied to the scaled data, specifying three clusters.\n\n\n\nTo understand our initial clustering, we visualized the results:\n\nimport matplotlib.pyplot as plt\n\nplt.scatter(scaled_features[:,0], scaled_features[:,1], c=clusters, cmap='viridis')\nplt.xlabel('Scaled AccX')\nplt.ylabel('Scaled AccY')\nplt.title('Initial Clustering with 3 Clusters')\nplt.show()\n\n\n\n\nThis visualization plots the scaled acceleration data on the X and Y axes, colored by the assigned cluster. It provides a first glimpse into how the data points are grouped by the algorithm.\n\n\n\nWhile starting with three clusters seemed logical, this approach had its limitations. Clustering, especially KMeans, doesn‚Äôt inherently consider pre-existing labels. It simply groups data based on feature similarity. Moreover, the true complexity of driving behavior might not be accurately captured in just three categories. This realization led us to question our initial assumption: Were three clusters really sufficient to capture the diverse nuances of driving behavior?\nIn the following section, we explore how we addressed these limitations by seeking an optimal number of clusters beyond the confines of the initial labeled categories."
  }
]